/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/scene.gltf --transform --types 
Files: public/models/scene.gltf [62.23KB] > /Users/gunnarhuscroft/projects/Code/hello-kitty-roulette/scene-transformed.glb [2.88MB] (-4525%)
Author: ruslan06.sadyckov (https://sketchfab.com/ruslan06.sadyckov)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/sawed-off-shotgun-a8383f1daf6f4c29aa63fd411fa83719
Title: Sawed-off shotgun
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'BASE' | 'Pick Up' | 'Reload' | string

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.SkinnedMesh
    Object_8: THREE.SkinnedMesh
    Object_9: THREE.SkinnedMesh
    Object_11: THREE.SkinnedMesh
    Object_12: THREE.SkinnedMesh
    Object_13: THREE.SkinnedMesh
    Object_14: THREE.SkinnedMesh
    Object_16: THREE.SkinnedMesh
    Object_17: THREE.SkinnedMesh
    Object_18: THREE.SkinnedMesh
    Object_19: THREE.SkinnedMesh
    GLTF_created_0_rootJoint: THREE.Bone
  }
  materials: {
    Light_iron: THREE.MeshStandardMaterial
    Black_wood: THREE.MeshStandardMaterial
    metal: THREE.MeshStandardMaterial
    Plastic_Red_7: THREE.MeshStandardMaterial
    Scratched_Gold: THREE.MeshStandardMaterial
    Copper_Easy: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

export function Gun({ currentAnimation, onSetAnimations, ...props }: { currentAnimation?: string | null, onSetAnimations?: (animations: string[]) => void } & JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group | null>(null)
  const { scene, animations } = useGLTF('/models/scene-transformed.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)

  // Report available animations on mount
  React.useEffect(() => {
    if (onSetAnimations) {
      const animationNames = animations.map(a => a.name)
      onSetAnimations(animationNames)
    }
  }, [animations, onSetAnimations])

  // Handle animation changes
  React.useEffect(() => {
    // Stop all current animations
    Object.values(actions).forEach(action => action?.fadeOut(0.5))
    
    // Play the selected animation
    if (currentAnimation && actions[currentAnimation]) {
      actions[currentAnimation]?.reset().fadeIn(0.5).play()
    }
  }, [currentAnimation, actions])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <primitive object={nodes.GLTF_created_0_rootJoint} />
        <skinnedMesh name="Object_7" geometry={nodes.Object_7.geometry} material={materials.Light_iron} skeleton={nodes.Object_7.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_8" geometry={nodes.Object_8.geometry} material={materials.Black_wood} skeleton={nodes.Object_8.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_9" geometry={nodes.Object_9.geometry} material={materials.metal} skeleton={nodes.Object_9.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_11" geometry={nodes.Object_11.geometry} material={materials.Plastic_Red_7} skeleton={nodes.Object_11.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_12" geometry={nodes.Object_12.geometry} material={materials.Scratched_Gold} skeleton={nodes.Object_12.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_13" geometry={nodes.Object_13.geometry} material={materials.Light_iron} skeleton={nodes.Object_13.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_14" geometry={nodes.Object_14.geometry} material={materials.Copper_Easy} skeleton={nodes.Object_14.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_16" geometry={nodes.Object_16.geometry} material={materials.Plastic_Red_7} skeleton={nodes.Object_16.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_17" geometry={nodes.Object_17.geometry} material={materials.Scratched_Gold} skeleton={nodes.Object_17.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_18" geometry={nodes.Object_18.geometry} material={materials.Light_iron} skeleton={nodes.Object_18.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
        <skinnedMesh name="Object_19" geometry={nodes.Object_19.geometry} material={materials.Copper_Easy} skeleton={nodes.Object_19.skeleton} position={[0.552, 0.868, 0.241]} scale={0.476} />
      </group>
    </group>
  )
}

useGLTF.preload('/scene-transformed.glb')
